# !/usr/bin/env python
"""
Define the unit tests for the :mod:`colour_hdri.distortion.vignette` module.
"""

from __future__ import annotations

import numpy as np
import os
import unittest

from colour_hdri import ROOT_RESOURCES_TESTS
from colour_hdri.distortion import (
    apply_radial_gradient,
    parabolic_2D_function,
    hyperbolic_cosine_2D_function,
    characterise_vignette_2D_function,
    correct_vignette_2D_function,
    characterise_vignette_bivariate_spline,
    correct_vignette_bivariate_spline,
    characterise_vignette_RBF,
    correct_vignette_RBF,
)
from colour_hdri.distortion.vignette import (
    vignette_principal_point,
    radial_sampling_function,
    vignette_sampling_coordinates,
)

__author__ = "Colour Developers"
__copyright__ = "Copyright 2015 Colour Developers"
__license__ = "New BSD License - https://opensource.org/licenses/BSD-3-Clause"
__maintainer__ = "Colour Developers"
__email__ = "colour-developers@colour-science.org"
__status__ = "Production"

__all__ = [
    "DIRECTORY_DISTORTION",
    "TestApplyRadialGradient",
    "TestParabolic2DFunction",
    "TestHyperbolicCosine2DFunction",
    "TestVignettePrincipalPoint",
    "TestCharacteriseVignette2DFunction",
    "TestCorrectVignette2DFunction",
    "TestCharacteriseVignetteBivariateSpline",
    "TestCorrectVignetteBivariateSpline",
    "TestRadialSamplingFunction",
    "TestVignetteSamplingCoordinates",
]

DIRECTORY_DISTORTION: str = os.path.join(
    ROOT_RESOURCES_TESTS, "colour_hdri", "distortion"
)


class TestApplyRadialGradient(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.apply_radial_gradient`
    definition unit tests methods.
    """

    def test_apply_radial_gradient(self):
        """
        Test :func:`colour_hdri.distortion.vignette.apply_radial_gradient`
        definition.
        """

        np.testing.assert_array_almost_equal(
            apply_radial_gradient(np.ones([5, 7])),
            np.array(
                [
                    [
                        0.00000000,
                        0.02293883,
                        0.21176451,
                        0.28571429,
                        0.21176451,
                        0.02293883,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.24369618,
                        0.51146942,
                        0.64285714,
                        0.51146942,
                        0.24369618,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.33333333,
                        0.66666667,
                        1.0,
                        0.66666667,
                        0.33333333,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.24369618,
                        0.51146942,
                        0.64285714,
                        0.51146942,
                        0.24369618,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.02293883,
                        0.21176451,
                        0.28571429,
                        0.21176451,
                        0.02293883,
                        0.00000000,
                    ],
                ]
            ),
            decimal=7,
        )


class TestParabolic2DFunction(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.parabolic_2D_function`
    definition unit tests methods.
    """

    def test_parabolic_2D_function(self):
        """
        Test :func:`colour_hdri.distortion.vignette.parabolic_2D_function`
        definition.
        """

        x_1, y_1 = np.meshgrid(np.linspace(0, 1, 5), np.linspace(0, 1, 7))
        np.testing.assert_array_almost_equal(
            parabolic_2D_function((x_1, y_1), -0.5, 0, 1, -0.5, 0, 1),
            np.array(
                [
                    [
                        1.00000000,
                        0.98437500,
                        0.93750000,
                        0.85937500,
                        0.75000000,
                    ],
                    [
                        0.99305556,
                        0.97743056,
                        0.93055556,
                        0.85243056,
                        0.74305556,
                    ],
                    [
                        0.97222222,
                        0.95659722,
                        0.90972222,
                        0.83159722,
                        0.72222222,
                    ],
                    [
                        0.93750000,
                        0.92187500,
                        0.87500000,
                        0.79687500,
                        0.68750000,
                    ],
                    [
                        0.88888889,
                        0.87326389,
                        0.82638889,
                        0.74826389,
                        0.63888889,
                    ],
                    [
                        0.82638889,
                        0.81076389,
                        0.76388889,
                        0.68576389,
                        0.57638889,
                    ],
                    [
                        0.75000000,
                        0.73437500,
                        0.68750000,
                        0.60937500,
                        0.50000000,
                    ],
                ]
            ),
            decimal=7,
        )


class TestHyperbolicCosine2DFunction(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.hyperbolic_cosine_2D_function`
    definition unit tests methods.
    """

    def test_hyperbolic_cosine_2D_function(self):
        """
        Test :func:`colour_hdri.distortion.vignette.hyperbolic_cosine_2D_function`
        definition.
        """

        x_1, y_1 = np.meshgrid(np.linspace(0, 1, 5), np.linspace(0, 1, 7))
        np.testing.assert_array_almost_equal(
            hyperbolic_cosine_2D_function((x_1, y_1), 1, -0.5, 1, -0.5, 1),
            np.array(
                [
                    [
                        1.00000000,
                        0.96858690,
                        0.87237403,
                        0.70531672,
                        0.45691937,
                    ],
                    [
                        0.98607893,
                        0.95422853,
                        0.85667628,
                        0.68729334,
                        0.43543803,
                    ],
                    [
                        0.94392813,
                        0.91075364,
                        0.80914594,
                        0.63272141,
                        0.37039595,
                    ],
                    [
                        0.87237403,
                        0.83695181,
                        0.72845968,
                        0.54008151,
                        0.25998221,
                    ],
                    [
                        0.76942442,
                        0.73076823,
                        0.61237102,
                        0.40679437,
                        0.10112265,
                    ],
                    [
                        0.63221295,
                        0.58924652,
                        0.45764781,
                        0.22914897,
                        -0.11060571,
                    ],
                    [
                        0.45691937,
                        0.40844642,
                        0.25998221,
                        0.00219930,
                        -0.38109785,
                    ],
                ]
            ),
            decimal=7,
        )


class TestVignettePrincipalPoint(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.vignette_principal_point`
    definition unit tests methods.
    """

    def test_vignette_principal_point(self):
        """
        Test :func:`colour_hdri.distortion.vignette.vignette_principal_point`
        definition.
        """

        np.testing.assert_array_almost_equal(
            vignette_principal_point(
                apply_radial_gradient(np.ones([50, 70, 3]))
            ),
            np.array([0.49000000, 0.49285714]),
            decimal=7,
        )


class TestCharacteriseVignette2DFunction(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.\
characterise_vignette_2D_function` definition unit tests methods.
    """

    def test_characterise_vignette_2D_function(self):
        """
        Test :func:`colour_hdri.distortion.vignette.\
characterise_vignette_2D_function` definition.
        """

        parameters, principal_point = characterise_vignette_2D_function(
            apply_radial_gradient(np.ones([50, 70, 3]))
        ).values
        np.testing.assert_array_almost_equal(
            parameters,
            np.array(
                [
                    [
                        -5.00000000,
                        0.06898022,
                        0.90000000,
                        -5.00000000,
                        0.04952344,
                        0.90000000,
                    ],
                    [
                        -5.00000000,
                        0.06898022,
                        0.90000000,
                        -5.00000000,
                        0.04952344,
                        0.90000000,
                    ],
                    [
                        -5.00000000,
                        0.06898022,
                        0.90000000,
                        -5.00000000,
                        0.04952344,
                        0.90000000,
                    ],
                ]
            ),
            decimal=7,
        )
        np.testing.assert_array_almost_equal(
            principal_point,
            np.array([0.49000000, 0.49285714]),
            decimal=7,
        )

        parameters, principal_point = characterise_vignette_2D_function(
            apply_radial_gradient(np.ones([50, 70, 3])),
            function="Hyperbolic Cosine",
        ).values
        np.testing.assert_array_almost_equal(
            parameters,
            np.array(
                [
                    [
                        2.09353284,
                        -0.49000000,
                        1.47487009,
                        -0.49285714,
                        0.65106212,
                    ],
                    [
                        2.09353284,
                        -0.49000000,
                        1.47487009,
                        -0.49285714,
                        0.65106212,
                    ],
                    [
                        2.09353284,
                        -0.49000000,
                        1.47487009,
                        -0.49285714,
                        0.65106212,
                    ],
                ]
            ),
            decimal=7,
        )
        np.testing.assert_array_almost_equal(
            principal_point,
            np.array([0.49000000, 0.49285714]),
            decimal=7,
        )


class TestCorrectVignette2DFunction(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.correct_vignette_2D_function`
    definition unit tests methods.
    """

    def test_correct_vignette_2D_function(self):
        """
        Test :func:`colour_hdri.distortion.vignette.correct_vignette_2D_function`
        definition.
        """

        image = apply_radial_gradient(np.ones([5, 7]))
        characterisation_data = characterise_vignette_2D_function(image)

        np.testing.assert_array_almost_equal(
            correct_vignette_2D_function(image, characterisation_data),
            np.array(
                [
                    [
                        -0.00000000,
                        0.12207694,
                        0.59724084,
                        0.74726015,
                        0.78073305,
                        1.08008213,
                        -0.00000000,
                    ],
                    [
                        0.00000000,
                        0.41329379,
                        0.67626899,
                        0.81987841,
                        0.76000993,
                        0.57614485,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.46815842,
                        0.75871697,
                        1.10319977,
                        0.83821275,
                        0.61123607,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.43909067,
                        0.70873168,
                        0.85777601,
                        0.80125512,
                        0.62754066,
                        -0.00000000,
                    ],
                    [
                        -0.00000000,
                        0.19337964,
                        0.74228485,
                        0.91263519,
                        1.04857765,
                        -0.47743533,
                        -0.00000000,
                    ],
                ]
            ),
            decimal=7,
        )

        characterisation_data = characterise_vignette_2D_function(
            image, function="Hyperbolic Cosine"
        )

        np.testing.assert_array_almost_equal(
            correct_vignette_2D_function(
                image, characterisation_data, function="Hyperbolic Cosine"
            ),
            np.array(
                [
                    [
                        -0.00000000,
                        0.18422822,
                        0.70826186,
                        0.80389226,
                        0.70826186,
                        0.18422822,
                        -0.00000000,
                    ],
                    [
                        0.00000000,
                        0.75311574,
                        1.07872038,
                        1.22956751,
                        1.07872038,
                        0.75311574,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.85990352,
                        1.25666497,
                        1.73399401,
                        1.25666497,
                        0.85990352,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.75311574,
                        1.07872038,
                        1.22956751,
                        1.07872038,
                        0.75311574,
                        0.00000000,
                    ],
                    [
                        -0.00000000,
                        0.18422822,
                        0.70826186,
                        0.80389226,
                        0.70826186,
                        0.18422822,
                        -0.00000000,
                    ],
                ]
            ),
            decimal=7,
        )


class TestCharacteriseVignetteBivariateSpline(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.\
characterise_vignette_bivariate_spline` definition unit tests methods.
    """

    def test_characterise_vignette_bivariate_spline(self):
        """
        Test :func:`colour_hdri.distortion.vignette.\
characterise_vignette_bivariate_spline` definition.
        """

        parameters, principal_point = characterise_vignette_bivariate_spline(
            apply_radial_gradient(np.ones([200, 300, 3]))
        ).values

        np.testing.assert_array_almost_equal(
            parameters,
            np.load(
                os.path.join(
                    DIRECTORY_DISTORTION,
                    "test_characterise_vignette_bivariate_spline.npy",
                )
            ),
            decimal=7,
        )
        np.testing.assert_array_almost_equal(
            principal_point,
            np.array([0.49750000, 0.49833333]),
            decimal=7,
        )


class TestCorrectVignetteBivariateSpline(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.\
correct_vignette_bivariate_spline` definition unit tests methods.
    """

    def test_correct_vignette_bivariate_spline(self):
        """
        Test :func:`colour_hdri.distortion.vignette.\
correct_vignette_bivariate_spline` definition.
        """

        image = apply_radial_gradient(np.ones([5, 7]))
        characterisation_data = characterise_vignette_bivariate_spline(image)

        np.testing.assert_array_almost_equal(
            correct_vignette_bivariate_spline(image, characterisation_data),
            np.array(
                [
                    [
                        0.00000000,
                        0.34503997,
                        3.05898171,
                        4.07189836,
                        3.05898171,
                        0.34503997,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        3.62388698,
                        7.30422840,
                        9.05756515,
                        7.30422840,
                        3.62388698,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        4.93640373,
                        9.48135821,
                        14.03151317,
                        9.48135821,
                        4.93640373,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        3.62388698,
                        7.30422840,
                        9.05756515,
                        7.30422840,
                        3.62388698,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.34503997,
                        3.05898171,
                        4.07189836,
                        3.05898171,
                        0.34503997,
                        0.00000000,
                    ],
                ]
            ),
            decimal=7,
        )


class TestRadialSamplingFunction(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.radial_sampling_function`
    definition unit tests methods.
    """

    def test_radial_sampling_function(self):
        """
        Test :func:`colour_hdri.distortion.vignette.radial_sampling_function`
        definition.
        """

        np.testing.assert_array_almost_equal(
            radial_sampling_function(),
            np.array(
                [
                    [
                        [-0.00000000, -0.00000000],
                        [-0.16666667, -0.00000000],
                        [-0.33333333, -0.00000000],
                        [-0.50000000, -0.00000000],
                        [-0.66666667, -0.00000000],
                        [-0.83333333, -0.00000000],
                        [-1.00000000, -0.00000000],
                    ],
                    [
                        [-0.00000000, -0.00000000],
                        [-0.15850942, -0.05150283],
                        [-0.31701884, -0.10300566],
                        [-0.47552826, -0.15450850],
                        [-0.63403768, -0.20601133],
                        [-0.79254710, -0.25751416],
                        [-0.95105652, -0.30901699],
                    ],
                    [
                        [-0.00000000, -0.00000000],
                        [-0.13483617, -0.09796421],
                        [-0.26967233, -0.19592842],
                        [-0.40450850, -0.29389263],
                        [-0.53934466, -0.39185683],
                        [-0.67418083, -0.48982104],
                        [-0.80901699, -0.58778525],
                    ],
                    [
                        [-0.00000000, -0.00000000],
                        [-0.09796421, -0.13483617],
                        [-0.19592842, -0.26967233],
                        [-0.29389263, -0.40450850],
                        [-0.39185683, -0.53934466],
                        [-0.48982104, -0.67418083],
                        [-0.58778525, -0.80901699],
                    ],
                    [
                        [-0.00000000, -0.00000000],
                        [-0.05150283, -0.15850942],
                        [-0.10300566, -0.31701884],
                        [-0.15450850, -0.47552826],
                        [-0.20601133, -0.63403768],
                        [-0.25751416, -0.79254710],
                        [-0.30901699, -0.95105652],
                    ],
                    [
                        [0.00000000, -0.00000000],
                        [0.00000000, -0.16666667],
                        [0.00000000, -0.33333333],
                        [0.00000000, -0.50000000],
                        [0.00000000, -0.66666667],
                        [0.00000000, -0.83333333],
                        [0.00000000, -1.00000000],
                    ],
                    [
                        [0.00000000, -0.00000000],
                        [0.05150283, -0.15850942],
                        [0.10300566, -0.31701884],
                        [0.15450850, -0.47552826],
                        [0.20601133, -0.63403768],
                        [0.25751416, -0.79254710],
                        [0.30901699, -0.95105652],
                    ],
                    [
                        [0.00000000, -0.00000000],
                        [0.09796421, -0.13483617],
                        [0.19592842, -0.26967233],
                        [0.29389263, -0.40450850],
                        [0.39185683, -0.53934466],
                        [0.48982104, -0.67418083],
                        [0.58778525, -0.80901699],
                    ],
                    [
                        [0.00000000, -0.00000000],
                        [0.13483617, -0.09796421],
                        [0.26967233, -0.19592842],
                        [0.40450850, -0.29389263],
                        [0.53934466, -0.39185683],
                        [0.67418083, -0.48982104],
                        [0.80901699, -0.58778525],
                    ],
                    [
                        [0.00000000, -0.00000000],
                        [0.15850942, -0.05150283],
                        [0.31701884, -0.10300566],
                        [0.47552826, -0.15450850],
                        [0.63403768, -0.20601133],
                        [0.79254710, -0.25751416],
                        [0.95105652, -0.30901699],
                    ],
                    [
                        [0.00000000, 0.00000000],
                        [0.16666667, 0.00000000],
                        [0.33333333, 0.00000000],
                        [0.50000000, 0.00000000],
                        [0.66666667, 0.00000000],
                        [0.83333333, 0.00000000],
                        [1.00000000, 0.00000000],
                    ],
                    [
                        [0.00000000, 0.00000000],
                        [0.15850942, 0.05150283],
                        [0.31701884, 0.10300566],
                        [0.47552826, 0.15450850],
                        [0.63403768, 0.20601133],
                        [0.79254710, 0.25751416],
                        [0.95105652, 0.30901699],
                    ],
                    [
                        [0.00000000, 0.00000000],
                        [0.13483617, 0.09796421],
                        [0.26967233, 0.19592842],
                        [0.40450850, 0.29389263],
                        [0.53934466, 0.39185683],
                        [0.67418083, 0.48982104],
                        [0.80901699, 0.58778525],
                    ],
                    [
                        [0.00000000, 0.00000000],
                        [0.09796421, 0.13483617],
                        [0.19592842, 0.26967233],
                        [0.29389263, 0.40450850],
                        [0.39185683, 0.53934466],
                        [0.48982104, 0.67418083],
                        [0.58778525, 0.80901699],
                    ],
                    [
                        [0.00000000, 0.00000000],
                        [0.05150283, 0.15850942],
                        [0.10300566, 0.31701884],
                        [0.15450850, 0.47552826],
                        [0.20601133, 0.63403768],
                        [0.25751416, 0.79254710],
                        [0.30901699, 0.95105652],
                    ],
                    [
                        [0.00000000, 0.00000000],
                        [0.00000000, 0.16666667],
                        [0.00000000, 0.33333333],
                        [0.00000000, 0.50000000],
                        [0.00000000, 0.66666667],
                        [0.00000000, 0.83333333],
                        [0.00000000, 1.00000000],
                    ],
                    [
                        [-0.00000000, 0.00000000],
                        [-0.05150283, 0.15850942],
                        [-0.10300566, 0.31701884],
                        [-0.15450850, 0.47552826],
                        [-0.20601133, 0.63403768],
                        [-0.25751416, 0.79254710],
                        [-0.30901699, 0.95105652],
                    ],
                    [
                        [-0.00000000, 0.00000000],
                        [-0.09796421, 0.13483617],
                        [-0.19592842, 0.26967233],
                        [-0.29389263, 0.40450850],
                        [-0.39185683, 0.53934466],
                        [-0.48982104, 0.67418083],
                        [-0.58778525, 0.80901699],
                    ],
                    [
                        [-0.00000000, 0.00000000],
                        [-0.13483617, 0.09796421],
                        [-0.26967233, 0.19592842],
                        [-0.40450850, 0.29389263],
                        [-0.53934466, 0.39185683],
                        [-0.67418083, 0.48982104],
                        [-0.80901699, 0.58778525],
                    ],
                    [
                        [-0.00000000, 0.00000000],
                        [-0.15850942, 0.05150283],
                        [-0.31701884, 0.10300566],
                        [-0.47552826, 0.15450850],
                        [-0.63403768, 0.20601133],
                        [-0.79254710, 0.25751416],
                        [-0.95105652, 0.30901699],
                    ],
                    [
                        [-0.00000000, 0.00000000],
                        [-0.16666667, 0.00000000],
                        [-0.33333333, 0.00000000],
                        [-0.50000000, 0.00000000],
                        [-0.66666667, 0.00000000],
                        [-0.83333333, 0.00000000],
                        [-1.00000000, 0.00000000],
                    ],
                ]
            ),
            decimal=7,
        )


class TestVignetteSamplingCoordinates(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.vignette_sampling_coordinates`
    definition unit tests methods.
    """

    def test_vignette_sampling_coordinates(self):
        """
        Test :func:`colour_hdri.distortion.vignette.\
vignette_sampling_coordinates` definition.
        """

        np.testing.assert_array_almost_equal(
            vignette_sampling_coordinates(
                principal_point=(0.55, 0.55), aspect_ratio=1.5
            ),
            np.array(
                [
                    [0.12222222, 0.12222222],
                    [0.90000000, 0.90000000],
                    [0.12222222, 0.90000000],
                    [0.90000000, 0.12222222],
                    [0.00000000, 0.00000000],
                    [0.12222222, 0.00000000],
                    [0.24444444, 0.00000000],
                    [0.36666667, 0.00000000],
                    [0.48888889, 0.00000000],
                    [0.60000000, 0.00000000],
                    [0.70000000, 0.00000000],
                    [0.80000000, 0.00000000],
                    [0.90000000, 0.00000000],
                    [1.00000000, 0.00000000],
                    [0.00000000, 1.00000000],
                    [0.12222222, 1.00000000],
                    [0.24444444, 1.00000000],
                    [0.36666667, 1.00000000],
                    [0.48888889, 1.00000000],
                    [0.60000000, 1.00000000],
                    [0.70000000, 1.00000000],
                    [0.80000000, 1.00000000],
                    [0.90000000, 1.00000000],
                    [1.00000000, 1.00000000],
                    [0.00000000, 0.12222222],
                    [0.00000000, 0.24444444],
                    [0.00000000, 0.36666667],
                    [0.00000000, 0.48888889],
                    [0.00000000, 0.60000000],
                    [0.00000000, 0.70000000],
                    [0.00000000, 0.80000000],
                    [0.00000000, 0.90000000],
                    [1.00000000, 0.12222222],
                    [1.00000000, 0.24444444],
                    [1.00000000, 0.36666667],
                    [1.00000000, 0.48888889],
                    [1.00000000, 0.60000000],
                    [1.00000000, 0.70000000],
                    [1.00000000, 0.80000000],
                    [1.00000000, 0.90000000],
                    [0.54992214, 0.55032891],
                    [0.46741842, 0.55019477],
                    [0.38516645, 0.54992648],
                    [0.30247205, 0.54991411],
                    [0.21982313, 0.54998580],
                    [0.13738361, 0.54983607],
                    [0.05485813, 0.54979336],
                    [0.55014122, 0.54994801],
                    [0.47142800, 0.51182051],
                    [0.39312260, 0.47361742],
                    [0.31479862, 0.43504133],
                    [0.23609347, 0.39689121],
                    [0.15747174, 0.35858078],
                    [0.07917963, 0.32048287],
                    [0.55005253, 0.54996778],
                    [0.48330440, 0.47707464],
                    [0.41634749, 0.40440792],
                    [0.34958654, 0.33169417],
                    [0.28300647, 0.25919412],
                    [0.21644565, 0.18600536],
                    [0.14974183, 0.11371802],
                    [0.55021995, 0.54974267],
                    [0.50145148, 0.44988567],
                    [0.45312668, 0.34964074],
                    [0.40450061, 0.24950135],
                    [0.35600799, 0.14954332],
                    [0.30756785, 0.04955856],
                    [0.54981557, 0.55007495],
                    [0.52448766, 0.43206028],
                    [0.49890271, 0.31431980],
                    [0.47346084, 0.19685532],
                    [0.44801934, 0.07893668],
                    [0.55004550, 0.55010710],
                    [0.55001414, 0.42605843],
                    [0.54984289, 0.30228680],
                    [0.54992831, 0.17852729],
                    [0.54999000, 0.05531547],
                    [0.55021352, 0.55007727],
                    [0.57538439, 0.43227260],
                    [0.60083377, 0.31456910],
                    [0.62665739, 0.19671958],
                    [0.65194939, 0.07931629],
                    [0.54990758, 0.54972936],
                    [0.59864186, 0.44986162],
                    [0.64717661, 0.34955757],
                    [0.69525771, 0.24966248],
                    [0.74406508, 0.14986713],
                    [0.79252344, 0.04914537],
                    [0.54985819, 0.55021542],
                    [0.61684036, 0.47746981],
                    [0.68353740, 0.40465656],
                    [0.75031570, 0.33161856],
                    [0.81700253, 0.25929775],
                    [0.88366093, 0.18608285],
                    [0.95024830, 0.11328528],
                    [0.54997098, 0.54967581],
                    [0.62854251, 0.51191041],
                    [0.70711997, 0.47368225],
                    [0.78535351, 0.43546410],
                    [0.86396507, 0.39674336],
                    [0.94209783, 0.35858914],
                    [0.55014305, 0.54990860],
                    [0.63256742, 0.54991445],
                    [0.71514446, 0.55001046],
                    [0.79770013, 0.55021079],
                    [0.88021610, 0.54988627],
                    [0.96239965, 0.55009919],
                    [0.54984320, 0.54983062],
                    [0.62868661, 0.58811014],
                    [0.70684885, 0.62649123],
                    [0.78521387, 0.66448677],
                    [0.86398057, 0.70295795],
                    [0.94218423, 0.74147849],
                    [0.55008807, 0.54972649],
                    [0.61655374, 0.62292260],
                    [0.68332397, 0.69527140],
                    [0.75039916, 0.76824959],
                    [0.81715309, 0.84121481],
                    [0.88382296, 0.91341291],
                    [0.95047233, 0.98626558],
                    [0.54985118, 0.54995501],
                    [0.59862895, 0.65041598],
                    [0.64698915, 0.75023708],
                    [0.69564739, 0.85040237],
                    [0.74411846, 0.95046154],
                    [0.55018644, 0.54970270],
                    [0.57529469, 0.66736734],
                    [0.60114009, 0.78553481],
                    [0.62628330, 0.90278153],
                    [0.54998782, 0.55025038],
                    [0.54989804, 0.67389867],
                    [0.54979235, 0.79734043],
                    [0.55006471, 0.92141741],
                    [0.54981105, 0.54986004],
                    [0.52461467, 0.66795936],
                    [0.49916836, 0.78535189],
                    [0.47365269, 0.90313906],
                    [0.54980258, 0.55031129],
                    [0.50147548, 0.65015516],
                    [0.45305849, 0.75053110],
                    [0.40454376, 0.85024090],
                    [0.35600245, 0.95033433],
                    [0.55016513, 0.55009994],
                    [0.48345111, 0.62262725],
                    [0.41637666, 0.69574635],
                    [0.34957141, 0.76840659],
                    [0.28315743, 0.84118409],
                    [0.21626295, 0.91350665],
                    [0.14932508, 0.98641011],
                    [0.55022391, 0.54989494],
                    [0.47155340, 0.58800167],
                    [0.39315996, 0.62670892],
                    [0.31452645, 0.66474602],
                    [0.23604970, 0.70282130],
                    [0.15748695, 0.74114423],
                    [0.07938061, 0.77962065],
                    [0.55009070, 0.54992500],
                    [0.46750828, 0.55007531],
                    [0.38482525, 0.55021537],
                    [0.30239949, 0.54990682],
                    [0.21980567, 0.54996957],
                    [0.13761067, 0.54993557],
                    [0.05501353, 0.55007621],
                ]
            ),
            decimal=7,
        )


class TestCharacteriseVignetteRBF(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.characterise_vignette_RBF`
    definition unit tests methods.
    """

    def test_characterise_vignette_RBF(self):
        """
        Test :func:`colour_hdri.distortion.vignette.characterise_vignette_RBF`
        definition.
        """

        parameters, principal_point = characterise_vignette_RBF(
            apply_radial_gradient(np.ones([200, 300, 3]))
        ).values

        np.testing.assert_array_almost_equal(
            parameters,
            np.array(
                [
                    [0.06373383, 0.06373383, 0.06373383],
                    [0.07256888, 0.07256888, 0.07256888],
                    [0.06900169, 0.06900169, 0.06900169],
                    [0.06722970, 0.06722970, 0.06722970],
                    [0.00000000, 0.00000000, 0.00000000],
                    [0.00001277, 0.00001277, 0.00001277],
                    [0.00127397, 0.00127397, 0.00127397],
                    [0.01114313, 0.01114313, 0.01114313],
                    [0.02551327, 0.02551327, 0.02551327],
                    [0.02593486, 0.02593486, 0.02593486],
                    [0.01183975, 0.01183975, 0.01183975],
                    [0.00146714, 0.00146714, 0.00146714],
                    [0.00001694, 0.00001694, 0.00001694],
                    [0.00000000, 0.00000000, 0.00000000],
                    [0.00000000, 0.00000000, 0.00000000],
                    [0.00001277, 0.00001277, 0.00001277],
                    [0.00127397, 0.00127397, 0.00127397],
                    [0.01114313, 0.01114313, 0.01114313],
                    [0.02551327, 0.02551327, 0.02551327],
                    [0.02593486, 0.02593486, 0.02593486],
                    [0.01183975, 0.01183975, 0.01183975],
                    [0.00146714, 0.00146714, 0.00146714],
                    [0.00001694, 0.00001694, 0.00001694],
                    [0.00000000, 0.00000000, 0.00000000],
                    [0.01036875, 0.01036875, 0.01036875],
                    [0.15152627, 0.15152627, 0.15152627],
                    [0.27731398, 0.27731398, 0.27731398],
                    [0.35033897, 0.35033897, 0.35033897],
                    [0.35261044, 0.35261044, 0.35261044],
                    [0.28041147, 0.28041147, 0.28041147],
                    [0.15591086, 0.15591086, 0.15591086],
                    [0.01260940, 0.01260940, 0.01260940],
                    [0.01036875, 0.01036875, 0.01036875],
                    [0.15152627, 0.15152627, 0.15152627],
                    [0.27731398, 0.27731398, 0.27731398],
                    [0.35033897, 0.35033897, 0.35033897],
                    [0.35261044, 0.35261044, 0.35261044],
                    [0.28041147, 0.28041147, 0.28041147],
                    [0.15591086, 0.15591086, 0.15591086],
                    [0.01260940, 0.01260940, 0.01260940],
                    [0.94878461, 0.94878461, 0.94878461],
                    [0.88793862, 0.88793862, 0.88793862],
                    [0.79142153, 0.79142153, 0.79142153],
                    [0.69232508, 0.69232508, 0.69232508],
                    [0.59252453, 0.59252453, 0.59252453],
                    [0.49244396, 0.49244396, 0.49244396],
                    [0.39417260, 0.39417260, 0.39417260],
                    [0.94878635, 0.94878635, 0.94878635],
                    [0.86433691, 0.86433691, 0.86433691],
                    [0.75224083, 0.75224083, 0.75224083],
                    [0.63417359, 0.63417359, 0.63417359],
                    [0.51952213, 0.51952213, 0.51952213],
                    [0.40465351, 0.40465351, 0.40465351],
                    [0.28589400, 0.28589400, 0.28589400],
                    [0.94878635, 0.94878635, 0.94878635],
                    [0.83073459, 0.83073459, 0.83073459],
                    [0.67718878, 0.67718878, 0.67718878],
                    [0.52196459, 0.52196459, 0.52196459],
                    [0.37198947, 0.37198947, 0.37198947],
                    [0.21618261, 0.21618261, 0.21618261],
                    [0.06145510, 0.06145510, 0.06145510],
                    [0.94878635, 0.94878635, 0.94878635],
                    [0.79495715, 0.79495715, 0.79495715],
                    [0.60654636, 0.60654636, 0.60654636],
                    [0.41682251, 0.41682251, 0.41682251],
                    [0.22885555, 0.22885555, 0.22885555],
                    [0.04225136, 0.04225136, 0.04225136],
                    [0.94878461, 0.94878461, 0.94878461],
                    [0.77581123, 0.77581123, 0.77581123],
                    [0.56101133, 0.56101133, 0.56101133],
                    [0.34600576, 0.34600576, 0.34600576],
                    [0.12967218, 0.12967218, 0.12967218],
                    [0.94948101, 0.94948101, 0.94948101],
                    [0.76567770, 0.76567770, 0.76567770],
                    [0.53992927, 0.53992927, 0.53992927],
                    [0.31980475, 0.31980475, 0.31980475],
                    [0.09296274, 0.09296274, 0.09296274],
                    [0.94948101, 0.94948101, 0.94948101],
                    [0.77761943, 0.77761943, 0.77761943],
                    [0.56295851, 0.56295851, 0.56295851],
                    [0.34786172, 0.34786172, 0.34786172],
                    [0.13158174, 0.13158174, 0.13158174],
                    [0.94809473, 0.94809473, 0.94809473],
                    [0.79870965, 0.79870965, 0.79870965],
                    [0.61055990, 0.61055990, 0.61055990],
                    [0.42091664, 0.42091664, 0.42091664],
                    [0.23288286, 0.23288286, 0.23288286],
                    [0.04569183, 0.04569183, 0.04569183],
                    [0.94878461, 0.94878461, 0.94878461],
                    [0.83748336, 0.83748336, 0.83748336],
                    [0.68407532, 0.68407532, 0.68407532],
                    [0.52886958, 0.52886958, 0.52886958],
                    [0.37896192, 0.37896192, 0.37896192],
                    [0.22314359, 0.22314359, 0.22314359],
                    [0.06801633, 0.06801633, 0.06801633],
                    [0.94809473, 0.94809473, 0.94809473],
                    [0.87421895, 0.87421895, 0.87421895],
                    [0.76278863, 0.76278863, 0.76278863],
                    [0.64475640, 0.64475640, 0.64475640],
                    [0.53019824, 0.53019824, 0.53019824],
                    [0.41538213, 0.41538213, 0.41538213],
                    [0.29648009, 0.29648009, 0.29648009],
                    [0.94878635, 0.94878635, 0.94878635],
                    [0.89951581, 0.89951581, 0.89951581],
                    [0.80474816, 0.80474816, 0.80474816],
                    [0.70574681, 0.70574681, 0.70574681],
                    [0.60585223, 0.60585223, 0.60585223],
                    [0.50588830, 0.50588830, 0.50588830],
                    [0.40644600, 0.40644600, 0.40644600],
                    [0.94809473, 0.94809473, 0.94809473],
                    [0.88184062, 0.88184062, 0.88184062],
                    [0.77064879, 0.77064879, 0.77064879],
                    [0.65278127, 0.65278127, 0.65278127],
                    [0.53817041, 0.53817041, 0.53817041],
                    [0.42331883, 0.42331883, 0.42331883],
                    [0.30447508, 0.30447508, 0.30447508],
                    [0.94878635, 0.94878635, 0.94878635],
                    [0.85185009, 0.85185009, 0.85185009],
                    [0.69546742, 0.69546742, 0.69546742],
                    [0.54030939, 0.54030939, 0.54030939],
                    [0.39037773, 0.39037773, 0.39037773],
                    [0.23457367, 0.23457367, 0.23457367],
                    [0.07905418, 0.07905418, 0.07905418],
                    [0.94809473, 0.94809473, 0.94809473],
                    [0.81131640, 0.81131640, 0.81131640],
                    [0.62329007, 0.62329007, 0.62329007],
                    [0.43365053, 0.43365053, 0.43365053],
                    [0.24362491, 0.24362491, 0.24362491],
                    [0.05701787, 0.05701787, 0.05701787],
                    [0.94878635, 0.94878635, 0.94878635],
                    [0.79066886, 0.79066886, 0.79066886],
                    [0.57615902, 0.57615902, 0.57615902],
                    [0.36110022, 0.36110022, 0.36110022],
                    [0.14481606, 0.14481606, 0.14481606],
                    [0.94948101, 0.94948101, 0.94948101],
                    [0.77863035, 0.77863035, 0.77863035],
                    [0.55325057, 0.55325057, 0.55325057],
                    [0.33322453, 0.33322453, 0.33322453],
                    [0.10613719, 0.10613719, 0.10613719],
                    [0.94809473, 0.94809473, 0.94809473],
                    [0.78874930, 0.78874930, 0.78874930],
                    [0.57415148, 0.57415148, 0.57415148],
                    [0.35920591, 0.35920591, 0.35920591],
                    [0.14287630, 0.14287630, 0.14287630],
                    [0.94878461, 0.94878461, 0.94878461],
                    [0.80731946, 0.80731946, 0.80731946],
                    [0.61914240, 0.61914240, 0.61914240],
                    [0.42946501, 0.42946501, 0.42946501],
                    [0.24155047, 0.24155047, 0.24155047],
                    [0.05326946, 0.05326946, 0.05326946],
                    [0.94948101, 0.94948101, 0.94948101],
                    [0.84506228, 0.84506228, 0.84506228],
                    [0.68832923, 0.68832923, 0.68832923],
                    [0.53323516, 0.53323516, 0.53323516],
                    [0.38327621, 0.38327621, 0.38327621],
                    [0.22750969, 0.22750969, 0.22750969],
                    [0.07223217, 0.07223217, 0.07223217],
                    [0.94878635, 0.94878635, 0.94878635],
                    [0.87139807, 0.87139807, 0.87139807],
                    [0.75975629, 0.75975629, 0.75975629],
                    [0.64196126, 0.64196126, 0.64196126],
                    [0.52731422, 0.52731422, 0.52731422],
                    [0.41244528, 0.41244528, 0.41244528],
                    [0.29376891, 0.29376891, 0.29376891],
                    [0.94878635, 0.94878635, 0.94878635],
                    [0.88793862, 0.88793862, 0.88793862],
                    [0.79163600, 0.79163600, 0.79163600],
                    [0.69232508, 0.69232508, 0.69232508],
                    [0.59252453, 0.59252453, 0.59252453],
                    [0.49244396, 0.49244396, 0.49244396],
                    [0.39424641, 0.39424641, 0.39424641],
                ]
            ),
            decimal=7,
        )
        np.testing.assert_array_almost_equal(
            principal_point,
            np.array([0.49750000, 0.49833333]),
            decimal=7,
        )


class TestCorrectVignetteRBF(unittest.TestCase):
    """
    Define :func:`colour_hdri.distortion.vignette.correct_vignette_RBF`
    definition unit tests methods.
    """

    def test_correct_vignette_RBF(self):
        """
        Test :func:`colour_hdri.distortion.vignette.correct_vignette_RBF`
        definition.
        """

        image = apply_radial_gradient(np.ones([5, 7]))
        characterisation_data = characterise_vignette_RBF(image)

        np.testing.assert_array_almost_equal(
            correct_vignette_RBF(image, characterisation_data),
            np.array(
                [
                    [
                        0.00000000,
                        0.09106205,
                        0.84065754,
                        1.13422117,
                        0.84065719,
                        0.09106202,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.96741957,
                        2.03041869,
                        2.55199752,
                        2.03041791,
                        0.96741914,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        1.32325905,
                        2.64651692,
                        3.96977398,
                        2.64651594,
                        1.32325852,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.96741965,
                        2.03041886,
                        2.55199746,
                        2.03041794,
                        0.96741919,
                        0.00000000,
                    ],
                    [
                        0.00000000,
                        0.09106205,
                        0.84065753,
                        1.13422119,
                        0.84065719,
                        0.09106202,
                        0.00000000,
                    ],
                ]
            ),
            decimal=7,
        )


if __name__ == "__main__":
    unittest.main()
